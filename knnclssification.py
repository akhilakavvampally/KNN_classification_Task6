# -*- coding: utf-8 -*-
"""KNNclssification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KE5ICLz0JsFCto_yZe4eNmfVywZ0lhtI
"""

# ============================================
# Task 6: K-Nearest Neighbors (KNN) Classification
# Dataset: Iris Dataset
# ============================================

# ---- STEP 1: Import Libraries ----
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# ---- STEP 2: Load Dataset ----
iris = load_iris()
X = iris.data
y = iris.target
feature_names = iris.feature_names
target_names = iris.target_names

df = pd.DataFrame(X, columns=feature_names)
df['target'] = y
print(df.head())

# ---- STEP 3: Normalize Features ----
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ---- STEP 4: Train-Test Split ----
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# ---- STEP 5: Experiment with Different K values ----
k_values = range(1, 11)
accuracies = []

for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    accuracies.append(acc)
    print(f"K={k} â†’ Accuracy: {acc:.4f}")

# Plot K vs Accuracy
plt.plot(k_values, accuracies, marker='o')
plt.xlabel("Number of Neighbors (K)")
plt.ylabel("Accuracy")
plt.title("K vs Accuracy")
plt.grid(True)
plt.show()

# ---- STEP 6: Choose Best K and Evaluate ----
best_k = k_values[np.argmax(accuracies)]
print(f"\nBest K: {best_k}")
knn_best = KNeighborsClassifier(n_neighbors=best_k)
knn_best.fit(X_train, y_train)
y_pred_best = knn_best.predict(X_test)

print("\nClassification Report:")
print(classification_report(y_test, y_pred_best, target_names=target_names))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred_best)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=target_names, yticklabels=target_names)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# ---- STEP 7: Visualize Decision Boundaries (Using 2 Features) ----
from matplotlib.colors import ListedColormap

X_2d = X_scaled[:, :2]  # First two features
X_train_2d, X_test_2d, y_train_2d, y_test_2d = train_test_split(X_2d, y, test_size=0.2, random_state=42)

knn_plot = KNeighborsClassifier(n_neighbors=best_k)
knn_plot.fit(X_train_2d, y_train_2d)

# Meshgrid for plotting
x_min, x_max = X_2d[:, 0].min() - 1, X_2d[:, 0].max() + 1
y_min, y_max = X_2d[:, 1].min() - 1, X_2d[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02),
                     np.arange(y_min, y_max, 0.02))

Z = knn_plot.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

plt.figure(figsize=(8, 6))
cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF'])
cmap_bold = ['red', 'green', 'blue']
plt.contourf(xx, yy, Z, cmap=cmap_light)
sns.scatterplot(x=X_2d[:, 0], y=X_2d[:, 1], hue=iris.target_names[y], palette=cmap_bold, edgecolor='k')
plt.xlabel(feature_names[0])
plt.ylabel(feature_names[1])
plt.title(f"KNN Decision Boundary (K={best_k}) - First Two Features")
plt.show()